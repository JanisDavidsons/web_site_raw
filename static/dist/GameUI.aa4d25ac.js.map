{"version":3,"sources":["../src/snake/Configuration.ts","../src/snake/Cell.ts","../src/snake/Grid.ts","../src/snake/Snake.ts","../src/snake/Game.ts","../src/snake/GameUI.ts"],"names":[],"mappings":"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","file":"GameUI.aa4d25ac.js","sourceRoot":"..","sourcesContent":["export const CELLS_HORIZONTAL = 70;\nexport const CELLS_VERTICAL = 35;\nexport const SPEED = 100;\nexport const MAX_LEVEL = 10;\n\nexport interface Configuration {\n  level: number;\n  speed: number;\n  nbCellsX: number;\n  nbCellsY: number;\n  width: number;\n  height: number;\n  cellWidth: number;\n  cellHeight: number;\n  apples: number;\n}\n","export class Cell {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n","import { Cell } from \"./Cell\";\nimport { Configuration } from \"./Configuration\";\n\nexport class Grid {\n  private configuration: Configuration;\n  apples: Cell[]= [\n    new Cell(33, 22),\n    new Cell(35, 22),\n    new Cell(37, 22),\n    new Cell(39, 22),\n    new Cell(41, 22)\n  ]\n\n  constructor(configuration: Configuration) {\n    this.configuration = configuration;\n  }\n\n  seed(): void {\n    for (let i = 0; i < this.configuration.apples; i++) {\n      const x = Math.floor(Math.random()*this.configuration.nbCellsX);\n      const y = Math.floor(Math.random()*this.configuration.nbCellsY);\n      this.apples.push(new Cell(x,y));\n    }\n  }\n\n  isAppleInside(cell: Cell): boolean {\n\n    return this.getApples().find(it=>it.x ===cell.x && it.y==cell.y)!==undefined;\n  }\n\n  removeApple(cell: Cell): void {\n\n    const apple = this.apples.find(it=>it.x ===cell.x && it.y==cell.y)\n    if (!apple){\n      return\n    }\n    const i = this.apples.indexOf(apple);\n    this.apples.splice(i,1)\n  }\n\n  isDone(): boolean {\n    return this.apples.length ===0;;\n  }\n\n  getApples(): Cell[] {\n    return this.apples;\n  }\n}\n","import { Cell } from \"./Cell\";\nimport { Direction } from \"./Direction\";\n\nexport class Snake {\n  head: Cell = new Cell(2, 0);\n  tail: Cell[] = [new Cell(0, 0), new Cell(1, 0)];\n  currentDirection: Direction = 'Right';\n  growCells: number = 0;\n\n  setDirection(newDirection: Direction) {\n    if (this.currentDirection === 'Right' && newDirection === 'Left') {\n      return\n    }\n    if (this.currentDirection === 'Up' && newDirection === 'Down') {\n      return\n    }\n    if (this.currentDirection === 'Down' && newDirection === 'Up') {\n      return\n    }\n    if (this.currentDirection === 'Left' && newDirection === 'Right') {\n      return\n    }\n    this.currentDirection = newDirection;\n  }\n\n  move() {\n    const oldHeadDirection = new Cell(this.head.x, this.head.y);\n\n    if (this.currentDirection === \"Right\") {\n      this.head = new Cell(this.head.x + 1, this.head.y)\n    } else if (this.currentDirection === \"Down\") {\n      this.head = new Cell(this.head.x, this.head.y + 1)\n    } else if (this.currentDirection === \"Up\") {\n      this.head = new Cell(this.head.x, this.head.y - 1)\n    } else if (this.currentDirection === \"Left\") {\n      this.head = new Cell(this.head.x - 1, this.head.y)\n    }\n\n    if (this.growCells > 0) {\n      this.growCells = this.growCells - 1;\n    } else {\n      this.tail.shift();\n    }\n    this.tail.push(oldHeadDirection);\n\n  }\n\n  grow() {\n    this.growCells = 3\n  }\n\n  getHead(): Cell {\n    return this.head\n  }\n\n  isSnake(cell: Cell): boolean {\n    return this.getTail().find(touchingItsef => touchingItsef.x ===cell.x&&touchingItsef.y ===cell.y) !==undefined\n  }\n\n  getDirection(): Direction {\n    return this.currentDirection;\n  }\n\n  getTail(): Cell[] {\n    return this.tail;\n  }\n}\n","import { Grid } from \"./Grid\";\nimport { Snake } from \"./Snake\";\nimport { Configuration, MAX_LEVEL } from \"./Configuration\";\nimport { Cell } from \"./Cell\";\n\nexport class Game {\n  private score: number = 0;\n  private running: boolean = false;\n  private grid: Grid;\n  private snake: Snake;\n  private configuration: Configuration;\n  private nextTick: number;\n\n  constructor(configuration: Configuration) {\n    this.configuration = configuration;\n    this.snake = new Snake();\n    this.grid = new Grid(this.configuration);\n    this.nextTick = 0;\n    this.running = true;\n  }\n\n  getSnake(): Snake {\n    return this.snake;\n  }\n\n  getConfiguration() {\n    return this.configuration;\n  }\n\n  shouldUpdate(time: number): boolean {\n    return this.running && time >= this.nextTick;\n  }\n\n  update(time: number) {\n    this.nextTick = time + this.configuration.speed;\n\n    this.snake.move();\n\n    switch (this.checkState()) {\n      case -1:\n        this.die();\n        break;\n      case 1:\n        this.snake.grow();\n        this.score += 100;\n        this.grid.removeApple(this.snake.getHead());\n        if (this.grid.isDone()) {\n          this.levelUp();\n        }\n    }\n  }\n\n  checkState() {\n    const cell = this.snake.getHead();\n\n    // left the play area or ate itself??\n    if (this.isOutside(cell) || this.snake.isSnake(cell)) {\n      // dead\n      return -1;\n    }\n\n    // ate apple?\n    if (this.grid.isAppleInside(cell)) {\n      return 1;\n    }\n\n    // nothing special\n    return 0;\n  }\n\n  levelUp() {\n    this.score += 1000;\n    this.configuration.level++;\n    if (this.configuration.level < MAX_LEVEL) {\n      this.configuration.speed -= 7;\n      this.grid.seed();\n    } else {\n      this.win();\n    }\n  }\n\n  win() {\n    this.stop();\n  }\n\n  die() {\n    this.stop();\n  }\n\n  isOutside(cell: Cell) {\n    const { nbCellsX, nbCellsY } = this.configuration;\n    return cell.x < 0 || cell.x >= nbCellsX || cell.y < 0 || cell.y >= nbCellsY;\n  }\n\n  getScore(): number {\n    return this.score;\n  }\n\n  getGrid(): Grid {\n    return this.grid;\n  }\n\n  stop() {\n    this.running = false;\n  }\n}\n","import {\n  Configuration,\n  CELLS_HORIZONTAL,\n  CELLS_VERTICAL,\n  SPEED\n} from \"./Configuration\";\nimport { Game } from \"./Game\";\n\nconst CELL_SIZE = 20;\nconst SCALE = 2.0;\n\nclass GameUI {\n  private canvas: HTMLCanvasElement;\n  private game: Game;\n\n  constructor(canvas: HTMLCanvasElement, game: Game) {\n    this.canvas = canvas;\n    this.game = game;\n    requestAnimationFrame(this.draw.bind(this));\n\n    window.addEventListener(\"keydown\", this.onKeyDown.bind(this), false);\n    window.focus();\n  }\n\n  draw(time: number) {\n    const context = this.canvas.getContext(\"2d\")!;\n    if (this.game.shouldUpdate(time)) {\n      this.drawBackground(context);\n      this.drawGrid(context);\n      this.drawBrand(context);\n      this.drawScore(context);\n      this.drawSnake(context);\n      this.drawApples(context);\n      this.game.update(time);\n    }\n    requestAnimationFrame(this.draw.bind(this));\n  }\n\n  drawBackground(context: CanvasRenderingContext2D) {\n    const { width, height } = this.game.getConfiguration();\n\n    context.fillStyle = \"#4caf50\";\n    context.fillRect(0, 0, width, height);\n  }\n\n  drawBrand(context: CanvasRenderingContext2D) {\n    const { width, height } = this.game.getConfiguration();\n\n    context.font = height / 2.5 + \"px Roboto\";\n    context.textBaseline = \"middle\";\n    context.textAlign = \"center\";\n    context.fillStyle = \"rgba(255,255,255,0.75)\";\n    //context.fillText(\"CODELEX\", width / 2, height / 2);\n  }\n\n  drawScore(context: CanvasRenderingContext2D) {\n    context.font = 35 * SCALE + \"px Arial\";\n    context.textAlign = \"left\";\n    context.textBaseline = \"top\";\n    context.fillStyle = \"rgba(255,255,255,0.75)\";\n    context.fillText(game.getScore().toString(), 10 * SCALE, 10 * SCALE);\n  }\n\n  drawGrid(context: CanvasRenderingContext2D) {\n    const game = this.game;\n    const { width, height, cellWidth, cellHeight } = game.getConfiguration();\n    const lineWidth = 1 * SCALE;\n\n    context.strokeStyle = \"rgba(255,255,255,0.95)\";\n    context.lineWidth = lineWidth;\n\n    for (let x = 0; x <= width; x += cellWidth) {\n      context.beginPath();\n      context.moveTo(x, 0);\n      context.lineTo(x, height);\n      context.stroke();\n    }\n\n    for (let y = 0; y <= height; y += cellHeight) {\n      context.beginPath();\n      context.moveTo(0, y);\n      context.lineTo(width, y);\n      context.stroke();\n    }\n  }\n\n  drawApples(context: CanvasRenderingContext2D) {\n    const { cellWidth, cellHeight } = game.getConfiguration();\n    const lineWidth = 1 * SCALE;\n\n    context.fillStyle = \"#e91e63\";\n    const apples = game.getGrid().getApples();\n    apples.forEach(cell =>\n      context.fillRect(\n        cellWidth * cell.x + lineWidth,\n        cellHeight * cell.y + lineWidth,\n        cellWidth - lineWidth * 2,\n        cellHeight - lineWidth * 2\n      )\n    );\n  }\n\n  drawSnake(context: CanvasRenderingContext2D) {\n    const snake = this.game.getSnake();\n    const { cellWidth, cellHeight } = this.game.getConfiguration();\n    // head\n    const size = (CELL_SIZE * SCALE) / 10;\n    const offset = (CELL_SIZE * SCALE) / 3;\n    const x = cellWidth * snake.getHead().x;\n    const y = cellHeight * snake.getHead().y;\n    context.fillStyle = \"#111111\";\n    context.fillRect(x, y, cellWidth, cellHeight);\n    // eyes\n    switch (snake.getDirection()) {\n      case \"Up\":\n        context.beginPath();\n        context.arc(x + offset, y + offset, size, 0, 2 * Math.PI, false);\n        context.arc(x + 2 * offset, y + offset, size, 0, 2 * Math.PI, false);\n        context.fillStyle = \"white\";\n        context.fill();\n        break;\n      case \"Down\":\n        context.beginPath();\n        context.arc(x + offset, y + 2 * offset, size, 0, 2 * Math.PI, false);\n        context.arc(\n          x + 2 * offset,\n          y + 2 * offset,\n          size,\n          0,\n          2 * Math.PI,\n          false\n        );\n        context.fillStyle = \"white\";\n        context.fill();\n        break;\n      case \"Right\":\n        context.beginPath();\n        context.arc(x + 2 * offset, y + offset, size, 0, 2 * Math.PI, false);\n        context.arc(\n          x + 2 * offset,\n          y + 2 * offset,\n          size,\n          0,\n          2 * Math.PI,\n          false\n        );\n        context.fillStyle = \"white\";\n        context.fill();\n        break;\n      case \"Left\":\n        context.beginPath();\n        context.arc(x + offset, y + offset, size, 0, 2 * Math.PI, false);\n        context.arc(x + offset, y + 2 * offset, size, 0, 2 * Math.PI, false);\n        context.fillStyle = \"white\";\n        context.fill();\n        break;\n    }\n    // tail\n    context.fillStyle = \"#333333\";\n    const tail = snake.getTail();\n    tail.forEach(cell =>\n      context.fillRect(\n        cellWidth * cell.x,\n        cellHeight * cell.y,\n        cellWidth,\n        cellHeight\n      )\n    );\n  }\n\n  onKeyDown(event: KeyboardEvent) {\n    const snake = this.game.getSnake();\n    switch (event.key) {\n      case \"w\":\n        event.preventDefault();\n        snake.setDirection(\"Up\");\n        break;\n      case \"s\":\n        event.preventDefault();\n        snake.setDirection(\"Down\");\n        break;\n      case \"a\":\n        event.preventDefault();\n        snake.setDirection(\"Left\");\n        break;\n      case \"d\":\n        event.preventDefault();\n        snake.setDirection(\"Right\");\n        break;\n    }\n  }\n}\n\nconst createCanvas = (): HTMLCanvasElement => {\n  const container = document.getElementById(\"game\")!;\n  const canvas = document.createElement(\"Canvas\") as HTMLCanvasElement;\n  container.appendChild(canvas);\n\n  // canvas element size in the page\n  canvas.style.width = CELLS_HORIZONTAL * CELL_SIZE + \"px\";\n  canvas.style.height = CELLS_VERTICAL * CELL_SIZE + \"px\";\n\n  // image buffer size\n  canvas.width = CELLS_HORIZONTAL * CELL_SIZE * SCALE;\n  canvas.height = CELLS_VERTICAL * CELL_SIZE * SCALE;\n\n  return canvas;\n};\n\nconst createConfiguration = (canvas: HTMLCanvasElement): Configuration => {\n  return {\n    level: 0,\n    speed: SPEED,\n    width: canvas.width,\n    height: canvas.height,\n    nbCellsX: CELLS_HORIZONTAL,\n    nbCellsY: CELLS_VERTICAL,\n    cellWidth: canvas.width / CELLS_HORIZONTAL,\n    cellHeight: canvas.height / CELLS_VERTICAL,\n    apples: 5\n  };\n};\n\nconst canvas = createCanvas();\nconst configuration = createConfiguration(canvas);\nconst game = new Game(configuration);\n\nnew GameUI(canvas, game);\n"]}